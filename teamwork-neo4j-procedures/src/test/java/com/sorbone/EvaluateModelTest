package com.sorbonne;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.neo4j.harness.Neo4j;
import org.neo4j.harness.Neo4jBuilders;
import org.neo4j.driver.*;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class EvaluateModelTest {

    private Neo4j neo4j;
    private Driver driver;

    @BeforeEach
    void setUp() {
        neo4j = Neo4jBuilders.newInProcessBuilder()
                .withProcedure(EvaluateModel.class) // S'assurer que la procédure est bien enregistrée
                .build();

        driver = GraphDatabase.driver(neo4j.boltURI());
    }

    @AfterEach
    void tearDown() {
        driver.close();
        neo4j.close();
    }

    @Test
    void testEvaluateModel() {
        try (Session session = driver.session()) {
            session.run("CREATE (:Neuron {id: 1, type: 'output', output: 0.75})");
            session.run("CREATE (:Neuron {id: 2, type: 'output', output: 0.85})");
        }

        List<EvaluateModel.EvaluateResult> results;
        try (Session session = driver.session()) {
            results = session.run("CALL nn.evaluateModel()")  // Vérifier que c'est bien `evaluateModel` et pas `EvaluateModel`
                    .list(record -> new EvaluateModel.EvaluateResult(record.asMap()));
        }

        assertEquals(2, results.size());
        assertEquals(1L, results.get(0).id);  // Vérifier que `id` est bien un `long`
        assertEquals(0.75, results.get(0).predicted, 0.0001);  // Tolérance pour comparer les doubles
        assertEquals(2L, results.get(1).id);
        assertEquals(0.85, results.get(1).predicted, 0.0001);
    }
}
