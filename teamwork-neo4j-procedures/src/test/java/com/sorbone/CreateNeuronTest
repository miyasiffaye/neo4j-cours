package com.sorbonne;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.neo4j.harness.Neo4j;
import org.neo4j.harness.Neo4jBuilders;
import org.neo4j.driver.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CreateNeuronTest {

    private Neo4j neo4j;
    private Driver driver;

    @BeforeEach
    void initializeNeo4j() {
        // Démarre une instance Neo4j en mémoire
        this.neo4j = Neo4jBuilders.newInProcessBuilder()
                .withProcedure(CreateNeuron.class) // Enregistre la procédure
                .build();

        // Crée un client Neo4j pour interagir avec la base de données
        this.driver = GraphDatabase.driver(neo4j.boltURI());
    }

    @AfterEach
    void closeNeo4j() {
        // Ferme le client et l'instance Neo4j
        this.driver.close();
        this.neo4j.close();
    }

    @Test
    void shouldCreateNeuronTest() {
        // Exécute la procédure stockée
        try (Session session = driver.session()) {
            String result = session.writeTransaction(tx -> {
                Result result1 = tx.run("CALL nn.createNeuron('123', '0', 'input', 'softmax')");
                return result1.single().get("result").asString();
            });

            // Vérifie que la procédure a retourné "ok"
            assertEquals("ok", result);
        }

        // Vérifie que le nœud a bien été créé
        try (Session session = driver.session()) {
            long count = session.readTransaction(tx -> {
                Result result = tx.run("MATCH (n:Neuron {id: '123'}) RETURN count(n) AS count");
                return result.single().get("count").asLong();
            });

            // Vérifie qu'un seul nœud a été créé
            assertEquals(1, count);
        }
    }
}
