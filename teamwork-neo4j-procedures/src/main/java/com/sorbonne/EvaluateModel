package com.sorbonne;

import org.neo4j.procedure.*;
import org.neo4j.graphdb.*;
import java.util.stream.Stream;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import org.neo4j.logging.Log;

public class EvaluateModel {

    @Context
    public GraphDatabaseService db;

    @Context
    public Log log;

    @Procedure(name = "nn.evaluateModel", mode = Mode.READ)
    @Description("Evaluate the model and return the predicted outputs")
    public Stream<EvaluateResult> evaluateModel() {
        List<EvaluateResult> results = new ArrayList<>();

        try (Transaction tx = db.beginTx()) {
            Result result = tx.execute("""
                MATCH (n:Neuron {type: 'output'})
                RETURN n.id AS id, n.output AS predicted
            """);

            while (result.hasNext()) {
                Map<String, Object> row = result.next();
                results.add(new EvaluateResult(row));
            }

            tx.commit(); // Valider la transaction
        } catch (Exception e) {
            log.error("Error evaluating model: ", e);
            throw new RuntimeException("Error evaluating model", e);
        }

        return results.stream(); // Retourner les résultats après fermeture de la transaction
    }

    public static class EvaluateResult {
        public final long id;
        public final double predicted;

        public EvaluateResult(Map<String, Object> row) {
            this.id = ((Number) row.get("id")).longValue(); // Assurer le bon type
            this.predicted = ((Number) row.get("predicted")).doubleValue();
        }
    }
}
